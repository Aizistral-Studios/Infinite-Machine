import java.time.LocalDate
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
}

plugins {
    id("io.freefair.lombok") version "8.10"
    id 'com.bmuschko.docker-remote-api' version '3.2.3'
}

def commit = 'git rev-parse HEAD'.execute().text.trim().substring(0, 7)
println("HEAD: " + commit)

version = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy.MM.dd-HH.mm.ss")) + "-" + commit

apply plugin: 'java'
apply plugin: 'eclipse'

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

repositories {
	flatDir {
		dirs 'deps'
	}
	mavenCentral()
}

dependencies {
	implementation name: 'commons-io-2.4'
	implementation name: 'guava-17.0'
	implementation name: 'gson-2.8.0'
	implementation name: 'asm-debug-all-5.2'
	implementation 'org.slf4j:slf4j-api:2.0.7'
	implementation 'ch.qos.logback:logback-classic:1.3.6'
	implementation 'net.dv8tion:JDA:5.1.0'
	implementation 'org.xerial:sqlite-jdbc:3.45.2.0'
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	archiveClassifier  = 'bin'
	archiveBaseName = archivesBaseName
}

task fatJar(type: Jar, dependsOn: 'jar') {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    inputs.file jar.archivePath
    from(configurations.runtimeClasspath.collect { zipTree(it).matching { 
		exclude "META-INF/**"
	} })
	
	from("${projectDir}/services") {
		into "META-INF/services"
	}
    
	archiveClassifier  = 'all'
	archiveBaseName = archivesBaseName
}

tasks.withType(Jar) {
	doFirst {
		manifest {
			attributes([
				"Main-Class": "com.aizistral.infmachine.Main",
				"Implementation-Version": version
			])
		}
	}
}

fatJar.doFirst {
    from zipTree(jar.archivePath)
}

artifacts {
    archives fatJar
}

task createDockerfile(type: Dockerfile) {
    destFile = project.file('build/docker/Dockerfile')
    from 'openjdk:21-jre-alpine'
    maintainer 'Aizistral "admin@aizistral.com"'
    copyFile fatJar.archiveFileName.get(), '/infinite-machine/InfiniteMachine.jar'
    runCommand 'mkdir /infinite-machine/persistence'
	runCommand 'mkdir /infinite-machine/persistence/database'
	runCommand 'mkdir /infinite-machine/persistence/config'
	workingDir("/infinite-machine/persistence")
    entryPoint 'java'
    defaultCommand '-jar', '../InfiniteMachine.jar'
}

task syncWebAppArchive(type: Sync) {
    dependsOn assemble
    from fatJar.archivePath
    into createDockerfile.destFile.parentFile
}

createDockerfile.dependsOn syncWebAppArchive
fatJar.finalizedBy createDockerfile